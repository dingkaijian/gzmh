<?xml version="1.0" encoding="UTF-8"?>

<!-- scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true 
	 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。   
     debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。	 -->
     
<configuration scan="true" scanPeriod="60 seconds" debug="true">
	
	<!-- 日志级别从高到地低：OFF、FATAL、 ERROR、 WARN、 INFO、 DEBUG、 TRACE、ALL  -->  
	
	<!-- 定义系统名称 -->
	<property name="SYS_NAME" value="AC_MAN_PORTAL" />
	<!-- 定义日志文件路径 -->
	<property name="SYS_LOG_DIR" value="/log" />
	<!-- 日志最大的历史 30天 -->
    <property name="MAX_HISTORY" value="30" />
    <!-- 最大日志文件大小 -->
    <property name="MAX_FILESIZE" value="10MB" />

	<!-- 控制台输出日志 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!-- 对日志进行格式化 -->
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} %-5level [%c] %msg%n
			</Pattern>
		</layout>
	</appender>
	
	<!-- INFO级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
	<appender name="rollingFileAppenderInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志过滤器，只记录ERROR级别日志 ,若要配置其他级别，复制appender，修改level，并在root中配置--> 
    	<filter class="ch.qos.logback.classic.filter.LevelFilter">
    		<level>INFO</level>
        	<onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚，日志输入位置，相对路径或绝对路径 -->
			<fileNamePattern>${SYS_LOG_DIR}/${SYS_NAME}/%d{yyyy-MM-dd}-info-log.log</fileNamePattern>
			<!-- 自动删除超过30天的日志文件 -->
			<maxHistory>${MAX_HISTORY}</maxHistory>
		</rollingPolicy>
		<!-- 日志文件最大的大小 默认10MB   --> 
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${MAX_FILESIZE}</maxFileSize>
        </triggeringPolicy>
		<encoder>
			<!-- 对日志进行格式化，必须指定，否则不会往文件输出内容 -->
        	<pattern>%msg%n</pattern>  
    	</encoder>
	</appender>
	
	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
	<appender name="rollingFileAppenderError" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志过滤器，只记录ERROR级别日志 ,若要配置其他级别，复制appender，修改level，并在root中配置--> 
    	<filter class="ch.qos.logback.classic.filter.LevelFilter">
    		<level>ERROR</level>
        	<onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚，日志输入位置，相对路径或绝对路径 -->
			<fileNamePattern>${SYS_LOG_DIR}/${SYS_NAME}/%d{yyyy-MM-dd}-error-log.log</fileNamePattern>
			<!-- 自动删除超过30天的日志文件 -->
			<maxHistory>${MAX_HISTORY}</maxHistory>
		</rollingPolicy>
		<!-- 日志文件最大的大小 默认10MB   --> 
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${MAX_FILESIZE}</maxFileSize>
        </triggeringPolicy>
		<encoder>
			<!-- 对日志进行格式化，必须指定，否则不会往文件输出内容 -->
        	<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level [%c] %msg%n</pattern>  
    	</encoder>
	</appender>
	
	<!-- WARN级别日志 -->
	<appender name="rollingFileAppenderWarn" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志过滤器，只记录WARN级别日志 --> 
    	<filter class="ch.qos.logback.classic.filter.LevelFilter">
    		<level>WARN</level>
        	<onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${SYS_LOG_DIR}/${SYS_NAME}/%d{yyyy-MM-dd}-warn-log.log</fileNamePattern>
			<maxHistory>${MAX_HISTORY}</maxHistory>
		</rollingPolicy>
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${MAX_FILESIZE}</maxFileSize>
        </triggeringPolicy>
		<encoder>
        	<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level [%c] %msg%n</pattern>  
    	</encoder>
	</appender>

	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />
	<logger name="java.sql.ResultStatement" level="DEBUG" />
	
	<logger name="org.mybatis.spring" level="WARN" />
	<logger name="org.springframework" level="WARN" />
	<logger name="net.sf.ehcache" level="WARN" />
	<logger name="org.apache" level="ERROR" />
		
	<logger name="com.ibatis" level="WARN" />
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="WARN" />
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="WARN" />
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="WARN" />
	
	<logger name="com.thinkgem.jeesite" level="WARN" />
	
	<!-- 正式环境请改成INFO级别，并记得修改系统名称SYS_NAME(上面定义的属性) -->
	<root level="INFO">
		<!-- 控制台输出 -->
		<appender-ref ref="stdout" />
		<!-- 输出到文件 但需要代码中写logger.error(e.getMessage(),e)) 或 log.warn("xxxx") -->
		<appender-ref ref="rollingFileAppenderInfo"/>
		<appender-ref ref="rollingFileAppenderError"/>
		<appender-ref ref="rollingFileAppenderWarn"/>
	</root>
</configuration>